# Docker Compose for Deepfake Protection API
version: '3.8'

services:
  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: deepfake-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - deepfake-network

  # Main API service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: deepfake-api
    ports:
      - "8000:8000"
      - "9090:9090"  # Metrics port
    environment:
      - DEBUG=false
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DEVICE=auto
      - PRELOAD_MODELS=true
      - MAX_BATCH_SIZE=5
      - RATE_LIMIT_PER_MINUTE=30
    volumes:
      - ./models:/app/models:ro
      - ./logs:/app/logs
      - api_uploads:/app/uploads
      - api_temp:/app/temp
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - deepfake-network

  # Celery worker for batch processing
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: deepfake-worker
    command: celery -A app.core.celery_app worker --loglevel=info --concurrency=2 --queues=batch_processing,model_management
    environment:
      - DEBUG=false
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DEVICE=auto
      - CACHE_MODELS=true
    volumes:
      - ./models:/app/models:ro
      - ./logs:/app/logs
      - worker_temp:/app/temp
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 6G
        reservations:
          memory: 3G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - deepfake-network

  # Celery beat for scheduled tasks
  beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: deepfake-beat
    command: celery -A app.core.celery_app beat --loglevel=info
    environment:
      - DEBUG=false
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - deepfake-network

  # Flower for Celery monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: deepfake-flower
    command: celery -A app.core.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - deepfake-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: deepfake-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - deepfake-network
    profiles:
      - production

volumes:
  redis_data:
  api_uploads:
  api_temp:
  worker_temp:

networks:
  deepfake-network:
    driver: bridge